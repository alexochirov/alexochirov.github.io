{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","react_default","a","createElement","onClick","this","props","className","winner","value","React","Component","Board","tableLoop","table","i","children","j","currIndexSquare","_this","winningCombination","z","length","push","renderSquare","key","_this2","src_Square","squares","Sort","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","onSortChange","htmlFor","onChange","type","id","Game","_this4","handleSort","state","history","Array","fill","arrOfPositionClick","stepNumber","xIsNext","isButtonActive","isSortAscend","setState","slice","currPositionClick","Math","floor","calculateWinner","concat","step","move","descOfPosClick","desc","_this5","jumpTo","_this6","current","isEndOfTheGame","status","moves","innerChild","src_Sort","src_Board","handleClick","lines","_lines$i","slicedToArray","b","c","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c4ba52b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.scss\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nclass Square extends React.Component {\r\n  render() {\r\n    return (\r\n      <button\r\n        onClick={this.props.onClick}\r\n        className={this.props.winner ? \"js-win game__square\" : \"game__square\"}\r\n      >\r\n        {\" \"}\r\n        {this.props.value}{\" \"}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i, winner) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        winner={winner}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  tableLoop = () => {\r\n    let table = [];\r\n\r\n    // Outer loop to create parent\r\n    for (let i = 0; i < 3; i++) {\r\n      let children = [];\r\n      //Inner loop to create children\r\n      for (let j = 0; j < 3; j++) {\r\n        const currIndexSquare = i * 3 + j;\r\n        let winner;\r\n        if (this.props.winningCombination) {\r\n          for (let z = 0; z < this.props.winningCombination.length; z++) {\r\n            if (this.props.winningCombination[z] === currIndexSquare) {\r\n              winner = true;\r\n            }\r\n          }\r\n        }\r\n        children.push(this.renderSquare(currIndexSquare, winner));\r\n      }\r\n      //Create the parent and add the children\r\n      table.push(\r\n        <div key={i} className=\"game__row\">\r\n          {\" \"}\r\n          {children}{\" \"}\r\n        </div>\r\n      );\r\n    }\r\n    return table;\r\n  };\r\n\r\n  render() {\r\n    return <div>{this.tableLoop()}</div>;\r\n  }\r\n}\r\nclass Sort extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange() {\r\n    this.props.onSortChange();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"game__sort\">\r\n        <label htmlFor=\"sort\">Ascend</label>\r\n        <input onChange={this.handleChange} type=\"checkbox\" id=\"sort\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSort = this.handleSort.bind(this);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      arrOfPositionClick: [\r\n        {\r\n          squares: \"\"\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      isButtonActive: null,\r\n      isSortAscend: true,\r\n      winningCombination: null\r\n    };\r\n  }\r\n  handleSort() {\r\n    this.setState({\r\n      isSortAscend: !this.state.isSortAscend\r\n    });\r\n  }\r\n\r\n  handleClick(i) {\r\n    const arrOfPositionClick = this.state.arrOfPositionClick.slice(\r\n      0,\r\n      this.state.stepNumber + 1\r\n    );\r\n    const currPositionClick =\r\n      Math.floor(i / 3) + 1 + \" row, \" + ((i % 3) + 1) + \" col, \";\r\n\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares\r\n        }\r\n      ]),\r\n      arrOfPositionClick: arrOfPositionClick.concat([\r\n        {\r\n          currPositionClick\r\n        }\r\n      ]),\r\n\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n      isButtonActive: null\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n      isButtonActive: step\r\n    });\r\n  }\r\n  innerChild(move, descOfPosClick, desc) {\r\n    return (\r\n      <li key={move}>\r\n        <div> {descOfPosClick} </div>{\" \"}\r\n        <button\r\n          className={this.state.isButtonActive === move ? \"game__button js-active\" : \"game__button\"}\r\n          onClick={() => this.jumpTo(move)}\r\n        >\r\n          {\" \"}\r\n          {desc}{\" \"}\r\n        </button>{\" \"}\r\n      </li>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const arrOfPositionClick = this.state.arrOfPositionClick;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    let isEndOfTheGame = false;\r\n    for (let z = 0; z < current.squares.length; z++) {\r\n      if (current.squares[z] === null) {\r\n        isEndOfTheGame = false;\r\n        break;\r\n      }\r\n      isEndOfTheGame = true;\r\n    }\r\n    let moves = [];\r\n\r\n    if (this.state.isSortAscend) {\r\n      for (let move = 0; move < history.length; move++) {\r\n        const desc = move ? \"Go to move #\" + move : \"Go to game start\";\r\n\r\n        let descOfPosClick =\r\n          move > 0 ? arrOfPositionClick[move].currPositionClick : null;\r\n\r\n        moves.push(this.innerChild(move, descOfPosClick, desc));\r\n      }\r\n    } else {\r\n      for (let move = history.length - 1; move > -1; move--) {\r\n        const desc = move !== 0 ? \"Go to move #\" + move : \"Go to game start\";\r\n\r\n        let descOfPosClick =\r\n          move > 0 ? arrOfPositionClick[move].currPositionClick : null;\r\n\r\n        moves.push(this.innerChild(move, descOfPosClick, desc));\r\n      }\r\n    }\r\n\r\n    let status;\r\n    let winningCombination;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner[1];\r\n      winningCombination = winner[0];\r\n    } else {\r\n      if (isEndOfTheGame) {\r\n        status = \"Tie. End of the game\";\r\n      } else {\r\n        status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game__board\">\r\n          <Sort onSortChange={i => this.handleSort()} />\r\n          <Board\r\n            winningCombination={winningCombination}\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />{\" \"}\r\n        </div>{\" \"}\r\n        <div>\r\n          <div> {status} </div> <ol> {moves} </ol>{\" \"}\r\n        </div>{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      let answer = [lines[i], squares[a]];\r\n      return answer;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}